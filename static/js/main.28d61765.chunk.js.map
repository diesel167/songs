{"version":3,"sources":["Components/Filter.js","Components/Songs.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","handleFilterName","e","setState","filterByName","target","value","tempArr","state","songsOrigin","filterByYear","filter","song","year","filteredSongs","artist","generateUniqueNames","notUniqueSongs","uniqueNames","map","indexOf","push","sort","a","b","listNames","key","name","i","length","onChange","size","handleFilterYear","generateUniqueYears","uniqueYears","listYears","gotOriginSongsBase","className","this","Component","Songs","rows","temp","isAllSongsLoaded","start","currentPage","songsPerPage","end","songs","slice","row","title","filtered","howManyPages","sortBySinger","unsorted","sorted","reverse","sortBySong","sortByYear","bind","fetch","then","response","json","onClick","App","count","howMany","Math","ceil","allPagesCount","songsCount","setSongsPerPage","changeEvent","lastSongsPerPageToggled","changeColor","style","color","innerHTML","setPageNum","lastCurrentPageToggled","generatePageNumButtons","buttonsNum","j","init","createRef","current","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28d61765.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\n\r\nclass Filter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            songsOrigin: this.props.songsOrigin,  //remember initial songs array\r\n            uniqueNames:'',\r\n            uniqueYears:'',\r\n            filterByName:'',\r\n            filterByYear:'',\r\n            gotOriginSongsBase: false\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state){\r\n        //to prevent mutation of songsOrigin in future state update\r\n        if(props.songsOrigin!==state.songsOrigin && !state.gotOriginSongsBase){\r\n            return {\r\n                songsOrigin: props.songsOrigin,\r\n                gotOriginSongsBase: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleFilterName = (e) => {\r\n        this.setState({filterByName: e.target.value});\r\n        let tempArr = this.state.songsOrigin;\r\n        //if double filtering\r\n        if(this.state.filterByYear && this.state.filterByYear!=='_All_'){\r\n            tempArr = tempArr.filter(song => song.year === this.state.filterByYear);\r\n        }\r\n        //send to Songs filtered by artist name songs array\r\n        //if 'All' filtered\r\n        if(e.target.value === '_All_'){\r\n            this.props.filteredSongs(tempArr);\r\n        }\r\n        //if filtered not All\r\n        else{\r\n            this.props.filteredSongs(tempArr.filter(song => song.artist === e.target.value));\r\n        }\r\n    };\r\n\r\n    generateUniqueNames = () => {\r\n        if(this.state.songsOrigin){\r\n            let notUniqueSongs = this.state.songsOrigin;\r\n            let uniqueNames = [];\r\n            notUniqueSongs.map(song => {\r\n                if(uniqueNames.indexOf(song.artist)<0){\r\n                    uniqueNames.push(song.artist);\r\n                }\r\n                return 0;\r\n            });\r\n            //sort it by asc\r\n            uniqueNames.sort(function(a, b){\r\n                if(a < b) { return -1; }\r\n                if(a > b) { return 1; }\r\n                return 0;\r\n            });\r\n            let listNames = [];\r\n            listNames.push(<option key={100000} value='_All_'>All</option>);\r\n            uniqueNames.map((name, i) => {\r\n                listNames.push(<option key={i*uniqueNames.length} value={name}>{name}</option>);\r\n                return 0;\r\n            });\r\n            return <>Singer:<select onChange={this.handleFilterName} size=\"1\">{listNames}</select></>;\r\n        }\r\n    };\r\n\r\n    handleFilterYear = (e) => {\r\n        this.setState({filterByYear: e.target.value});\r\n        let tempArr = this.state.songsOrigin;\r\n        //if double filtering\r\n        if(this.state.filterByName && this.state.filterByName!=='_All_'){\r\n            tempArr = tempArr.filter(song => song.artist === this.state.filterByName);\r\n        }\r\n        //send to Songs filtered by year songs array\r\n        //if 'All' filtered\r\n        if(e.target.value === '_All_'){\r\n            this.props.filteredSongs(tempArr);\r\n        }\r\n        //if filtered not All\r\n        else{\r\n            this.props.filteredSongs(tempArr.filter(song => song.year === e.target.value));\r\n        }\r\n    };\r\n\r\n    generateUniqueYears = () => {\r\n        if(this.state.songsOrigin){\r\n            let notUniqueSongs = this.state.songsOrigin;\r\n            let uniqueYears = [];\r\n            notUniqueSongs.map(song => {\r\n                if(uniqueYears.indexOf(song.year)<0){\r\n                  uniqueYears.push(song.year);\r\n                }\r\n                return 0;\r\n            });\r\n            //sort it by asc\r\n            uniqueYears.sort(function(a, b){\r\n                if(a < b) { return -1; }\r\n                if(a > b) { return 1; }\r\n                return 0;\r\n            });\r\n            let listYears = [];\r\n            listYears.push(<option key={100001} value='_All_'>All</option>);\r\n            uniqueYears.map((year, i) => {\r\n                listYears.push(<option key={i*uniqueYears.length} value={year}>{year}</option>);\r\n                return 0;\r\n            });\r\n            return <>Year:<select onChange={this.handleFilterYear} size=\"1\">{listYears}</select></>;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='filter'>\r\n                {this.generateUniqueNames()}\r\n                {this.generateUniqueYears()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filter;","import React, {Component} from 'react';\r\nimport Filter from './Filter';\r\n\r\n\r\nclass Songs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            songs:'',\r\n            isAllSongsLoaded: false,\r\n            sorted:''\r\n        };\r\n        this.filteredSongs = this.filteredSongs.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://davidpots.com/jakeworry/017%20JSON%20Grouping,%20part%203/data.json')\r\n            .then(response => response.json())\r\n            .then((a)=>{\r\n                this.setState({songs: [...a.songs]});\r\n                this.setState({isAllSongsLoaded: true});\r\n                this.props.howManyPages(a.songs.length);\r\n            });\r\n    }\r\n\r\n    rows = () => {\r\n        //temp container for songs\r\n        let temp = [];\r\n        if(this.state.isAllSongsLoaded){\r\n            let start = this.props.currentPage*this.props.songsPerPage-this.props.songsPerPage;\r\n            let end = this.props.currentPage*this.props.songsPerPage > this.state.songs.length ? this.state.songs.length : this.props.currentPage*this.props.songsPerPage;\r\n            this.state.songs.slice(start,end).map((song, i) => {\r\n                let row=<tr key={start*end*i+i}>\r\n                    <td key={start*end*i+2}>{song.artist}</td>\r\n                    <td key={start*end*i+3}>{song.title}</td>\r\n                    <td key={start*end*i+4}>{song.year}</td>\r\n                </tr>;\r\n                temp.push(row);\r\n                return 0;\r\n            });\r\n            return temp;\r\n        }\r\n    };\r\n    //change songs array\r\n    filteredSongs = (filtered) => {\r\n        this.setState({songs: filtered});\r\n        this.props.howManyPages(filtered.length);\r\n    };\r\n    sortBySinger = () => {\r\n        let unsorted = this.state.songs;\r\n        if(this.state.sorted === 'singerAsc'){\r\n            unsorted.reverse();\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'singerDesc'\r\n            })\r\n        }\r\n        else if(this.state.sorted === 'singerDesc'){\r\n            unsorted.reverse();\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'singerAsc'\r\n            })\r\n        }\r\n        else{\r\n            unsorted.sort(function(a, b){\r\n                if(a.artist < b.artist) { return -1; }\r\n                if(a.artist > b.artist) { return 1; }\r\n                return 0;\r\n            });\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'singerAsc'\r\n            })\r\n        }\r\n    };\r\n    sortBySong = () => {\r\n        let unsorted = this.state.songs;\r\n        if(this.state.sorted === 'songAsc'){\r\n            unsorted.reverse();\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'songDesc'\r\n            })\r\n        }\r\n        else if(this.state.sorted === 'songDesc'){\r\n            unsorted.reverse();\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'songAsc'\r\n            })\r\n        }\r\n        else{\r\n            unsorted.sort(function(a, b){\r\n                if(a.title < b.title) { return -1; }\r\n                if(a.title > b.title) { return 1; }\r\n                return 0;\r\n            });\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'songAsc'\r\n            })\r\n        }\r\n    };\r\n    sortByYear = () => {\r\n        let unsorted = this.state.songs;\r\n        if(this.state.sorted === 'yearAsc'){\r\n            unsorted.reverse();\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'yearDesc'\r\n            })\r\n        }\r\n        else if(this.state.sorted === 'yearDesc'){\r\n            unsorted.reverse();\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'yearAsc'\r\n            })\r\n        }\r\n        else{\r\n            unsorted.sort(function(a, b){\r\n                if(a.year < b.year) { return -1; }\r\n                if(a.year > b.year) { return 1; }\r\n                return 0;\r\n            });\r\n            this.setState({\r\n                songs: unsorted,\r\n                sorted: 'yearAsc'\r\n            })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='songs'>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th onClick={this.sortBySinger}>Singer</th>\r\n                            <th onClick={this.sortBySong}>Song</th>\r\n                            <th onClick={this.sortByYear}>Year</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.rows()}\r\n                    </tbody>\r\n                </table>\r\n                <Filter\r\n                    songsOrigin={this.state.songs}\r\n                    filteredSongs={this.filteredSongs}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Songs;","import React, { Component, createRef } from 'react';\r\nimport './App.css';\r\nimport Songs from './Components/Songs';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.init = createRef();\r\n        this.state = {\r\n            songsPerPage: 10,\r\n            lastSongsPerPageToggled: '',  //last clicked button with songs per page counter\r\n            currentPage: 1,\r\n            lastCurrentPageToggled: '',\r\n            allPagesCount: 1,\r\n            songsCount: 0\r\n        };\r\n        this.howManyPages = this.howManyPages.bind(this);\r\n    }\r\n\r\n    //update state for initial clicked button\r\n    componentDidMount() {\r\n        this.setState({\r\n            lastSongsPerPageToggled: this.init.current,\r\n            lastCurrentPageToggled: ''\r\n        })\r\n    }\r\n\r\n    //get count from Songs component and calculate amount of pages\r\n    howManyPages = (count) => {\r\n        let howMany = Math.ceil(count / this.state.songsPerPage);\r\n        this.setState({\r\n            allPagesCount: howMany,\r\n            songsCount: count\r\n        })\r\n    };\r\n\r\n    //click handler for songs per page buttons\r\n    setSongsPerPage = (changeEvent) => {\r\n        if(this.state.lastSongsPerPageToggled){\r\n            //change color\r\n            let changeColor = this.state.lastSongsPerPageToggled;\r\n            changeColor.style.color = 'white';\r\n            this.setState({lastSongsPerPageToggled: changeColor});\r\n        }\r\n        changeEvent.target.style.color = 'red';\r\n        this.setState({\r\n            lastSongsPerPageToggled: changeEvent.target,\r\n            songsPerPage: changeEvent.target.innerHTML,\r\n            currentPage: 1,\r\n            allPagesCount: Math.ceil(this.state.songsCount / changeEvent.target.innerHTML)\r\n        });\r\n    };\r\n\r\n    setPageNum = (changeEvent) => {\r\n        this.setState({\r\n            currentPage: changeEvent.target.innerHTML,\r\n            lastCurrentPageToggled: changeEvent.target,\r\n        });\r\n    };\r\n\r\n    generatePageNumButtons = () => {\r\n        let buttonsNum = [];\r\n        let i;\r\n        //dont move 'radio' navigation at the beginning\r\n        if(this.state.currentPage<=3 || this.state.allPagesCount<=5){\r\n            i = 1;\r\n        }\r\n        //move 'radio' navigation\r\n        if(this.state.currentPage>3 && this.state.allPagesCount>5 && this.state.currentPage<=this.state.allPagesCount-2){\r\n            i = this.state.currentPage-2;\r\n        }\r\n        //dont move 'radio' navigation in the end\r\n        if(this.state.currentPage>3 && this.state.allPagesCount>5 && this.state.currentPage>this.state.allPagesCount-2){\r\n            i = this.state.allPagesCount-4;\r\n        }\r\n        for(let j = i; j <= i+4; j++){\r\n            let temp ='';\r\n            if(j<=this.state.allPagesCount){\r\n                temp = <button key={this.state.allPagesCount*j}className=\"btn\" onClick={this.setPageNum}>{j}</button>;\r\n            }\r\n            if(+j === +this.state.currentPage){\r\n                temp = <button key={this.state.allPagesCount*j} className=\"btn\" style={{color:'red'}} onClick={this.setPageNum}>{j}</button>;\r\n            }\r\n            buttonsNum.push(temp);\r\n        }\r\n        return buttonsNum;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Songs\r\n                    songsPerPage = {this.state.songsPerPage}\r\n                    currentPage = {this.state.currentPage}\r\n                    howManyPages = {this.howManyPages}/>\r\n                <div className=\"footer\">\r\n                    <div className=\"pageNum\">\r\n                        {this.generatePageNumButtons()}\r\n                        | of {this.state.allPagesCount}\r\n                    </div>\r\n                    <div className=\"songsPerPage\">\r\n                        <button className=\"btn\" onClick={this.setSongsPerPage}>5</button>\r\n                        <button className=\"btn\" ref={this.init} style={{color: 'red'}} onClick={this.setSongsPerPage}>10</button>\r\n                        <button className=\"btn\" onClick={this.setSongsPerPage}>25</button>\r\n                        <button className=\"btn\" onClick={this.setSongsPerPage}>50</button>\r\n                        <button className=\"btn\" onClick={this.setSongsPerPage}>100</button>\r\n                    </div>\r\n                </div>\r\n          </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}